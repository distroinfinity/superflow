import { useState, useEffect } from "react";
import { ethers } from "ethers";
import "../css/deploytoken.css"

const tokenABI=[
  {
    inputs: [
      { internalType: "string", name: "_name", type: "string" },
      { internalType: "string", name: "_symbol", type: "string" },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
        indexed: true,
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
        indexed: true,
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
        indexed: false,
      },
    ],
    type: "event",
    name: "Approval",
    anonymous: false,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
        indexed: true,
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
        indexed: true,
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
        indexed: false,
      },
    ],
    type: "event",
    name: "Transfer",
    anonymous: false,
  },
  {
    inputs: [
      { internalType: "address", name: "_account", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "addAdmin",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
    name: "admins",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
  {
    inputs: [
      { internalType: "address", name: "_owner", type: "address" },
      { internalType: "address", name: "_spender", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
  },
  {
    inputs: [
      { internalType: "address", name: "", type: "address" },
      { internalType: "address", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
    name: "allowances",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      { internalType: "uint256", name: "_amount", type: "uint256" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
  {
    inputs: [
      { internalType: "address", name: "_account", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
    name: "balances",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      { internalType: "uint256", name: "_amount", type: "uint256" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "burn",
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "gov",
    outputs: [{ internalType: "address", name: "", type: "address" }],
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "inPrivateTransferMode",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
    name: "isHandler",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
    name: "isMinter",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      { internalType: "uint256", name: "_amount", type: "uint256" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "mint",
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
    name: "nonStakingAccounts",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "nonStakingSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
  },
  {
    inputs: [
      { internalType: "address", name: "_account", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "removeAdmin",
  },
  {
    inputs: [{ internalType: "address", name: "_gov", type: "address" }],
    stateMutability: "nonpayable",
    type: "function",
    name: "setGov",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_handler",
        type: "address",
      },
      { internalType: "bool", name: "_isActive", type: "bool" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "setHandler",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_inPrivateTransferMode",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "setInPrivateTransferMode",
  },
  {
    inputs: [
      { internalType: "string", name: "_name", type: "string" },
      { internalType: "string", name: "_symbol", type: "string" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "setInfo",
  },
  {
    inputs: [
      { internalType: "address", name: "_minter", type: "address" },
      { internalType: "bool", name: "_isActive", type: "bool" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "setMinter",
  },
  {
    inputs: [
      { internalType: "address", name: "_account", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
    name: "stakedBalance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "totalStaked",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
  },
  {
    inputs: [],
    stateMutability: "view",
    type: "function",
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      { internalType: "uint256", name: "_amount", type: "uint256" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
  {
    inputs: [
      { internalType: "address", name: "_sender", type: "address" },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      { internalType: "uint256", name: "_amount", type: "uint256" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
  },
  {
    inputs: [
      { internalType: "address", name: "_token", type: "address" },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      { internalType: "uint256", name: "_amount", type: "uint256" },
    ],
    stateMutability: "nonpayable",
    type: "function",
    name: "withdrawToken",
  },
];

const tokenBytecode =  "0x60806040523480156200001157600080fd5b5060405162001ca238038062001ca283398101604081905262000034916200026e565b828282600062000045848262000370565b50600162000054838262000370565b50600480546001600160a01b0319163390811790915562000076908262000082565b50505050505062000464565b6001600160a01b038216620000e95760405162461bcd60e51b815260206004820152602360248201527f42617365546f6b656e3a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b606482015260840160405180910390fd5b80600254620000f991906200043c565b6002556001600160a01b038216600090815260056020526040902054620001229082906200043c565b6001600160a01b03831660009081526005602090815260408083209390935560079052205460ff16156200016457806003546200016091906200043c565b6003555b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001d157600080fd5b81516001600160401b0380821115620001ee57620001ee620001a9565b604051601f8301601f19908116603f01168101908282118183101715620002195762000219620001a9565b816040528381526020925086838588010111156200023657600080fd5b600091505b838210156200025a57858201830151818301840152908201906200023b565b600093810190920192909252949350505050565b6000806000606084860312156200028457600080fd5b83516001600160401b03808211156200029c57600080fd5b620002aa87838801620001bf565b94506020860151915080821115620002c157600080fd5b50620002d086828701620001bf565b925050604084015190509250925092565b600181811c90821680620002f657607f821691505b6020821081036200031757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200036b57600081815260208120601f850160051c81016020861015620003465750805b601f850160051c820191505b81811015620003675782815560010162000352565b5050505b505050565b81516001600160401b038111156200038c576200038c620001a9565b620003a4816200039d8454620002e1565b846200031d565b602080601f831160018114620003dc5760008415620003c35750858301515b600019600386901b1c1916600185901b17855562000367565b600085815260208120601f198616915b828110156200040d57888601518255948401946001909101908401620003ec565b50858210156200042c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200045e57634e487b7160e01b600052601160045260246000fd5b92915050565b61182e80620004746000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637048027511610104578063a9059cbb116100a2578063cf456ae711610071578063cf456ae714610468578063cfad57a21461047b578063dd62ed3e1461048e578063dfbaefb1146104c757600080fd5b8063a9059cbb14610416578063a923fc4014610429578063aa271e1a1461043c578063c93be6361461045f57600080fd5b80639554381a116100de5780639554381a146103c557806395d89b41146103e85780639cb7de4b146103f05780639dc29fac1461040357600080fd5b8063704802751461038157806370a0823114610394578063817b1cd2146103bd57600080fd5b806327e235e31161017c57806346ea87af1161014b57806346ea87af1461030d57806355b6ed5c146103305780635a47a1a71461035b578063602172671461036e57600080fd5b806327e235e31461029d578063313ce567146102bd57806340c10f19146102d7578063429b62e5146102ea57600080fd5b806312d43a51116101b857806312d43a51146102355780631785f53c1461026057806318160ddd1461027357806323b872dd1461028a57600080fd5b806301e33667146101df57806306fdde03146101f4578063095ea7b314610212575b600080fd5b6101f26101ed366004611399565b6104d4565b005b6101fc610520565b60405161020991906113f9565b60405180910390f35b61022561022036600461142c565b6105ae565b6040519015158152602001610209565b600454610248906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b6101f261026e366004611456565b6105c5565b61027c60025481565b604051908152602001610209565b610225610298366004611399565b610610565b61027c6102ab366004611456565b60056020526000908152604090205481565b6102c5601281565b60405160ff9091168152602001610209565b6101f26102e536600461142c565b610717565b6102256102f8366004611456565b60086020526000908152604090205460ff1681565b61022561031b366004611456565b600a6020526000908152604090205460ff1681565b61027c61033e366004611471565b600660209081526000928352604080842090915290825290205481565b6101f26103693660046114b2565b610784565b61027c61037c366004611456565b6107c1565b6101f261038f366004611456565b610806565b61027c6103a2366004611456565b6001600160a01b031660009081526005602052604090205490565b61027c610854565b6102256103d3366004611456565b60076020526000908152604090205460ff1681565b6101fc61086b565b6101f26103fe3660046114cf565b610878565b6101f261041136600461142c565b6108cd565b61022561042436600461142c565b610936565b6101f26104373660046115a9565b610943565b61022561044a366004611456565b600b6020526000908152604090205460ff1681565b61027c60035481565b6101f26104763660046114cf565b610986565b6101f2610489366004611456565b6109db565b61027c61049c366004611471565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b6009546102259060ff1681565b6004546001600160a01b031633146105075760405162461bcd60e51b81526004016104fe9061160d565b60405180910390fd5b61051b6001600160a01b0384168383610a27565b505050565b6000805461052d9061163b565b80601f01602080910402602001604051908101604052809291908181526020018280546105599061163b565b80156105a65780601f1061057b576101008083540402835291602001916105a6565b820191906000526020600020905b81548152906001019060200180831161058957829003601f168201915b505050505081565b60006105bb338484610a79565b5060015b92915050565b6004546001600160a01b031633146105ef5760405162461bcd60e51b81526004016104fe9061160d565b6001600160a01b03166000908152600860205260409020805460ff19169055565b336000908152600a602052604081205460ff161561063b57610633848484610ba7565b506001610710565b6001600160a01b03841660009081526006602090815260408083203384529091529020548211156106c35760405162461bcd60e51b815260206004820152602c60248201527f42617365546f6b656e3a207472616e7366657220616d6f756e7420657863656560448201526b647320616c6c6f77616e636560a01b60648201526084016104fe565b6001600160a01b03841660009081526006602090815260408083203384529091528120546106f290849061168b565b90506106ff853383610a79565b61070a858585610ba7565b60019150505b9392505050565b336000908152600b602052604090205460ff166107765760405162461bcd60e51b815260206004820152601c60248201527f4d696e7461626c6542617365546f6b656e3a20666f7262696464656e0000000060448201526064016104fe565b6107808282610e7a565b5050565b6004546001600160a01b031633146107ae5760405162461bcd60e51b81526004016104fe9061160d565b6009805460ff1916911515919091179055565b6001600160a01b03811660009081526007602052604081205460ff16156107ea57506000919050565b506001600160a01b031660009081526005602052604090205490565b6004546001600160a01b031633146108305760405162461bcd60e51b81526004016104fe9061160d565b6001600160a01b03166000908152600860205260409020805460ff19166001179055565b6000600354600254610866919061168b565b905090565b6001805461052d9061163b565b6004546001600160a01b031633146108a25760405162461bcd60e51b81526004016104fe9061160d565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b336000908152600b602052604090205460ff1661092c5760405162461bcd60e51b815260206004820152601c60248201527f4d696e7461626c6542617365546f6b656e3a20666f7262696464656e0000000060448201526064016104fe565b6107808282610f96565b60006105bb338484610ba7565b6004546001600160a01b0316331461096d5760405162461bcd60e51b81526004016104fe9061160d565b600061097983826116ec565b50600161051b82826116ec565b6004546001600160a01b031633146109b05760405162461bcd60e51b81526004016104fe9061160d565b6001600160a01b03919091166000908152600b60205260409020805460ff1916911515919091179055565b6004546001600160a01b03163314610a055760405162461bcd60e51b81526004016104fe9061160d565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261051b908490611130565b6001600160a01b038316610ae05760405162461bcd60e51b815260206004820152602860248201527f42617365546f6b656e3a20617070726f76652066726f6d20746865207a65726f604482015267206164647265737360c01b60648201526084016104fe565b6001600160a01b038216610b455760405162461bcd60e51b815260206004820152602660248201527f42617365546f6b656e3a20617070726f766520746f20746865207a65726f206160448201526564647265737360d01b60648201526084016104fe565b6001600160a01b0383811660008181526006602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610c0f5760405162461bcd60e51b815260206004820152602960248201527f42617365546f6b656e3a207472616e736665722066726f6d20746865207a65726044820152686f206164647265737360b81b60648201526084016104fe565b6001600160a01b038216610c755760405162461bcd60e51b815260206004820152602760248201527f42617365546f6b656e3a207472616e7366657220746f20746865207a65726f206044820152666164647265737360c81b60648201526084016104fe565b60095460ff1615610ced57336000908152600a602052604090205460ff16610ced5760405162461bcd60e51b815260206004820152602560248201527f42617365546f6b656e3a206d73672e73656e646572206e6f742077686974656c6044820152641a5cdd195960da1b60648201526084016104fe565b6001600160a01b038316600090815260056020526040902054811115610d685760405162461bcd60e51b815260206004820152602a60248201527f42617365546f6b656e3a207472616e7366657220616d6f756e7420657863656560448201526964732062616c616e636560b01b60648201526084016104fe565b6001600160a01b038316600090815260056020526040902054610d8c90829061168b565b6001600160a01b038085166000908152600560205260408082209390935590841681522054610dbc9082906117ac565b6001600160a01b0380841660009081526005602090815260408083209490945591861681526007909152205460ff1615610e025780600354610dfe919061168b565b6003555b6001600160a01b03821660009081526007602052604090205460ff1615610e355780600354610e3191906117ac565b6003555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b9a91815260200190565b6001600160a01b038216610edc5760405162461bcd60e51b815260206004820152602360248201527f42617365546f6b656e3a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104fe565b80600254610eea91906117ac565b6002556001600160a01b038216600090815260056020526040902054610f119082906117ac565b6001600160a01b03831660009081526005602090815260408083209390935560079052205460ff1615610f505780600354610f4c91906117ac565b6003555b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6001600160a01b038216610ffa5760405162461bcd60e51b815260206004820152602560248201527f42617365546f6b656e3a206275726e2066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104fe565b6001600160a01b0382166000908152600560205260409020548111156110715760405162461bcd60e51b815260206004820152602660248201527f42617365546f6b656e3a206275726e20616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104fe565b6001600160a01b03821660009081526005602052604090205461109590829061168b565b6001600160a01b0383166000908152600560205260409020556002546110bc90829061168b565b6002556001600160a01b03821660009081526007602052604090205460ff16156110f257806003546110ee919061168b565b6003555b6040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610f8a565b6000611185826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112059092919063ffffffff16565b80519091501561051b57808060200190518101906111a391906117bf565b61051b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104fe565b50565b6060611214848460008561121c565b949350505050565b60608247101561127d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104fe565b843b6112cb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104fe565b600080866001600160a01b031685876040516112e791906117dc565b60006040518083038185875af1925050503d8060008114611324576040519150601f19603f3d011682016040523d82523d6000602084013e611329565b606091505b5091509150611339828286611344565b979650505050505050565b60608315611353575081610710565b8251156113635782518084602001fd5b8160405162461bcd60e51b81526004016104fe91906113f9565b80356001600160a01b038116811461139457600080fd5b919050565b6000806000606084860312156113ae57600080fd5b6113b78461137d565b92506113c56020850161137d565b9150604084013590509250925092565b60005b838110156113f05781810151838201526020016113d8565b50506000910152565b60208152600082518060208401526114188160408501602087016113d5565b601f01601f19169190910160400192915050565b6000806040838503121561143f57600080fd5b6114488361137d565b946020939093013593505050565b60006020828403121561146857600080fd5b6107108261137d565b6000806040838503121561148457600080fd5b61148d8361137d565b915061149b6020840161137d565b90509250929050565b801515811461120257600080fd5b6000602082840312156114c457600080fd5b8135610710816114a4565b600080604083850312156114e257600080fd5b6114eb8361137d565b915060208301356114fb816114a4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261152d57600080fd5b813567ffffffffffffffff8082111561154857611548611506565b604051601f8301601f19908116603f0116810190828211818310171561157057611570611506565b8160405283815286602085880101111561158957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156115bc57600080fd5b823567ffffffffffffffff808211156115d457600080fd5b6115e08683870161151c565b935060208501359150808211156115f657600080fd5b506116038582860161151c565b9150509250929050565b6020808252601490820152732130b9b2aa37b5b2b71d103337b93134b23232b760611b604082015260600190565b600181811c9082168061164f57607f821691505b60208210810361166f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105bf576105bf611675565b601f82111561051b57600081815260208120601f850160051c810160208610156116c55750805b601f850160051c820191505b818110156116e4578281556001016116d1565b505050505050565b815167ffffffffffffffff81111561170657611706611506565b61171a81611714845461163b565b8461169e565b602080601f83116001811461174f57600084156117375750858301515b600019600386901b1c1916600185901b1785556116e4565b600085815260208120601f198616915b8281101561177e5788860151825594840194600190910190840161175f565b508582101561179c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156105bf576105bf611675565b6000602082840312156117d157600080fd5b8151610710816114a4565b600082516117ee8184602087016113d5565b919091019291505056fea26469706673582212207fa9124bb973f30c9b009157bedbabd4165026583dd2f01f4c097c7325f1472c64736f6c63430008130033";

const TokenDeployer = () => {
  const [walletAddress, setWalletAddress] = useState(null);
  const [chainId, setChainId] = useState(null);
  const [chainName, setChainName] = useState(null);
  const [form, setForm] = useState({ name: '', symbol: '', supply: '' });
  const [loading, setLoading] = useState(false);
  const [contractAddress, setContractAddress] = useState(null);
  const [explorerUrl, setExplorerUrl] = useState(null);

  async function fetchChainData(chainId) {
    try {
      const response = await fetch('https://chainid.network/chains.json');
      const chains = await response.json();
      const chainInfo = chains.find((chain) => chain.chainId === chainId);
      if (chainInfo) {
        setChainName(chainInfo.name);
        setExplorerUrl(chainInfo.explorers?.[0]?.url || null);
      } else {
        setChainName('Unknown Network');
        setExplorerUrl(null);
      }
    } catch (error) {
      console.error('Failed to fetch chain data', error);
    }
  }

  async function connectWallet() {
    if (!window.ethereum) return alert('MetaMask not detected');
    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const accounts = await provider.send('eth_requestAccounts', []);
      const network = await provider.getNetwork();
      
      setWalletAddress(accounts[0]);
      setChainId(Number(network.chainId));
      fetchChainData(Number(network.chainId));
    } catch (error) {
      console.error('Wallet connection failed', error);
    }
  }

  function handleChange(e) {
    setForm({ ...form, [e.target.name]: e.target.value });
  }

  async function deployToken() {
    if (!walletAddress) return alert('Connect wallet first');
    if (!form.name || !form.symbol || !form.supply) return alert('Fill all fields');
    setLoading(true);
    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();

      const factory = new ethers.ContractFactory(tokenABI, tokenBytecode, signer);
      const contract = await factory.deploy(form.name, form.symbol, ethers.parseUnits(form.supply, 18));
      await contract.waitForDeployment();

      setContractAddress(contract.target);
      alert(`Contract deployed at: ${contract.target}`);
    } catch (error) {
      console.error('Deployment failed', error);
      alert('Deployment error: ' + error.message);
    }
    setLoading(false);
  }

  useEffect(() => {
    if (window.ethereum) {
      window.ethereum.on('chainChanged', () => window.location.reload());
    }
  }, []);

  return (
    <div className="container">
      <div className="glass-tile">
        <button onClick={connectWallet} className="connect-button">
          {walletAddress ? `Connected: ${walletAddress.slice(0, 6)}...` : 'Connect Wallet'}
        </button>
        {walletAddress && chainId && (
          <p className="chain-info">Connected to {chainName} (Chain ID: {chainId})</p>
        )}
        <input name="name" placeholder="Token Name" className="input-field" onChange={handleChange} />
        <input name="symbol" placeholder="Token Symbol" className="input-field" onChange={handleChange} />
        <input name="supply" placeholder="Initial Supply" type="number" className="input-field" onChange={handleChange} />
        <button onClick={deployToken} className="deploy-button" disabled={loading}>
          {loading ? 'Deploying...' : 'Deploy Token'}
        </button>
        {contractAddress && (
          <p className="contract-info">
            Deployed at: 
            {explorerUrl ? (
              <a href={`${explorerUrl}/address/${contractAddress}`} target="_blank" rel="noopener noreferrer" className="contract-link">
                {contractAddress}
              </a>
            ) : (
              contractAddress
            )}
          </p>
        )}
      </div>
    </div>
  );
};

export default TokenDeployer;


